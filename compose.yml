services:

  shops:
    build:
      context: ./back/shops
      dockerfile: ./Dockerfile
    ports:
      - 0:8000

  info:
    build:
      context: ./back/info
      dockerfile: ./Dockerfile
    ports:
      - 0:8000

  auth:
    build:
      context: ./back/auth
      dockerfile: ./Dockerfile
    ports:
      - 0:8080
    networks:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    environment:
      - APP_JWT_SECRET=secret
      - APP_JWT_ISSUER=issuer
      - APP_JWT_SUBJECT=subject
      - APP_JWT_DURATION=2592000
  main:
    build:
      context: ./back/main
      dockerfile: ./Dockerfile
    ports:
      - 0:8080
    networks:
      - backend
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 5
    environment:
      - APP_JWT_SECRET=secret
      - APP_JWT_ISSUER=issuer
      - APP_JWT_SUBJECT=subject

  rabbitmq:
    image: rabbitmq
    restart: always
    environment:
      - RABBITMQ_DEFAULT_USER=rmuser
      - RABBITMQ_DEFAULT_PASS=rmpassword
    ports:
      - 15672:15672
    networks:
      - backend

  postgres:
    image: postgres
    restart: always
    volumes:
      - postgres-data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: app
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: pgpassword
    ports:
      - 0:5432
    networks:
      backend:
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  postgres-data:
networks:
  backend: